<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Développement - Poser les briques</title>
<style>
  body{font-family:sans-serif;background:#f0f4f8;margin:2rem;text-align:center;}
  .btn{display:inline-block;margin:.5rem;padding:.5rem 1rem;background:#3a86ff;color:white;text-decoration:none;border-radius:8px;}
  .expression{margin:1rem 0;font-size:1.5rem;font-weight:bold;}
  .slots,.palette{display:flex;gap:.5rem;justify-content:center;flex-wrap:wrap;margin:.5rem 0;}
  .slot{min-width:80px;min-height:40px;border:2px dashed #3a86ff;border-radius:8px;display:flex;align-items:center;justify-content:center;}
  .brick{padding:.4rem .8rem;border:2px solid #3a86ff;border-radius:8px;background:white;cursor:grab;}
  .brick.dragging{opacity:.5;}
  .slot.correct{background:#4CAF50;color:white;border-color:#4CAF50;}
  .slot.incorrect{background:#e74c3c;color:white;border-color:#e74c3c;}
  #feedback{margin-top:.5rem;font-weight:bold;}
</style>
</head>
<body>

<a href="index.html" class="btn">← Retour à l'accueil</a>
<h1>Développe — Pose les briques</h1>

<div class="expression" id="expressionArea"></div>
<div class="slots" id="slotsArea"></div>
<div class="palette" id="paletteArea"></div>
<div id="feedback"></div>
<button class="btn" onclick="checkAnswer()">Vérifier</button>
<button class="btn" onclick="nextQuestion()">Nouvelle expression</button>

<script>
const expressionArea = document.getElementById('expressionArea');
const slotsArea = document.getElementById('slotsArea');
const paletteArea = document.getElementById('paletteArea');
const feedbackEl = document.getElementById('feedback');

let currentTerms = [];
let dragged = null;

function generateQuestion(){
  const a = Math.floor(Math.random()*5)+2;
  const b = Math.floor(Math.random()*5)+1;
  const sign = Math.random()<0.5?'+':'-';
  const expr = `${a}(x ${sign} ${b})`;
  const constTerm = sign==='+' ? a*b : -a*b;
  const terms = [`${a}x`, `${constTerm}`];
  return {expr, terms};
}

function renderQuestion(){
  const q = generateQuestion();
  currentTerms = q.terms;
  expressionArea.textContent = q.expr;
  slotsArea.innerHTML = '';
  paletteArea.innerHTML = '';

  q.terms.forEach(term=>{
    const slot = document.createElement('div');
    slot.className='slot';
    slot.dataset.expect = term;
    slot.addEventListener('dragover', e=>e.preventDefault());
    slot.addEventListener('drop', onDrop);
    slotsArea.appendChild(slot);
  });

  // Mélange termes + distractor
  const bricks = [...q.terms, `${Math.floor(Math.random()*10)+1}`];
  bricks.sort(()=>Math.random()-0.5);

  bricks.forEach((t,i)=>{
    const brick = document.createElement('div');
    brick.className='brick';
    brick.textContent = t;
    brick.draggable = true;
    brick.addEventListener('dragstart', e=>{dragged=e.target; e.target.classList.add('dragging');});
    brick.addEventListener('dragend', e=>e.target.classList.remove('dragging'));
    paletteArea.appendChild(brick);
  });
}

function onDrop(e){
  e.preventDefault();
  const slot = e.currentTarget;
  if(slot.firstChild){
    paletteArea.appendChild(slot.firstChild);
  }
  slot.appendChild(dragged);
}

function checkAnswer(){
  let correct = true;
  Array.from(slotsArea.children).forEach(slot=>{
    const expected = slot.dataset.expect;
    const actual = slot.firstChild ? slot.firstChild.textContent : null;
    if(actual===expected){
      slot.classList.add('correct'); slot.classList.remove('incorrect');
    } else {slot.classList.add('incorrect'); slot.classList.remove('correct'); correct=false;}
  });
  feedbackEl.textContent = correct ? 'Bravo ✅' : 'Des erreurs ❌';
}

function nextQuestion(){feedbackEl.textContent=''; renderQuestion();}

// Initialisation
nextQuestion();
</script>

</body>
</html>
